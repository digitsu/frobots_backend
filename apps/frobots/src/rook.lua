---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by digitsu.
--- DateTime: 2022/01/15 15:36
---
--- rook.lua
--- rook moves in columns, scanning and attacking targets. Moves horizontally only, but scans vertically and horizontally

return function(state, ...)
    state = state or {}
    state.type = "rook"

    local function change()
        if(state.course == 0) then
            state.boundary = 5
            state.course = 180
        else
            state.boundary = 995
            state.course = 0
        end
        drive(state.course, 30)
    end

    -- look somewhere and fire cannon repeatedly at in-range targets
    local function look(deg)
        local range = scan(deg, 2)
        while (range > 0 and range <= 700) do
            drive( state.course, 0)
            cannon(deg, range)
            if(state.d < damage()) then
                state.d = damage()
                change()
                return state
            end
            range = scan(deg, 2)
        end
    end

    if state.status == nil then
        -- init some starting parameters
        state.d = damage()
        state.course = 0
        state.boundary = 995
        state.status = "ranking"
        return state
    end

    -- move to the center of the board
    if state.status == "ranking" then
        if(loc_y() < 500) then
            drive( 90, 70)
            if (loc_y() - 500 < 20 and speed() > 0) then
                -- drop out of the loop
                return state
            else
                drive(0,0)
                state.status = "filing"
                return state
            end
        else
            drive(270, 70)
            if (loc_y() - 500 > 20 and speed() > 0) then
                return state
            else
                drive(0,0)
                state.status = "filing"
                return state
            end
        end

    end

    if state.status == "filing" then
        drive( state.course, 30 )
        look(0)
        look(90)
        look(180)
        look(270)

        if (state.course == 0) then
            if (loc_x() > state.boundary or speed() == 0) then
                change()
            end
        else
            if (loc_x() < state.boundary or speed() == 0) then
                change()
            end
        end
    end
    return state
end